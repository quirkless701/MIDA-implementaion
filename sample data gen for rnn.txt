```
import numpy as np
from scipy.optimize import linprog

# Function to generate synthetic data for a vendor with limited supply
def generate_limited_supply_data(num_samples):
    data = []

    for _ in range(num_samples):
        # Randomize the number of buyers and a fixed supply for the vendor
        num_buyers = np.random.randint(2, 10)
        supply = np.random.randint(5, 20)  # Limited supply between 5 and 20 units

        # Generate random valuations for buyers with diminishing marginal utility
        buyer_scaling_factors = np.random.uniform(10, 100, num_buyers)
        buyer_valuations = [
            scaling_factor * np.log(1 + np.arange(1, supply + 1))
            for scaling_factor in buyer_scaling_factors
        ]

        # Generate seller costs with rising marginal costs
        seller_costs = np.array([supply * (q / supply) ** 2 for q in range(1, supply + 1)])

        # Flatten the valuation and cost arrays
        buyer_valuations_flat = np.concatenate(buyer_valuations)
        seller_costs_flat = seller_costs

        # Objective function to minimize the negative gain from trade
        c = -np.concatenate([buyer_valuations_flat, -seller_costs_flat])
        bounds = [(0, None) for _ in range(len(buyer_valuations_flat) + len(seller_costs_flat))]

        # Linear programming to approximate the equilibrium price
        result = linprog(c, bounds=bounds, method='highs')
        equilibrium_price = result.fun if result.success else 0

        # Store input features and output price
        market_details = np.hstack((buyer_valuations_flat, seller_costs_flat))
        data.append((market_details, equilibrium_price))

    return data

# Generate synthetic data
num_samples = 1000
synthetic_data = generate_limited_supply_data(num_samples)

# Example of data output
print(f"Sample Market Details: {synthetic_data[0][0]}")
print(f"Sample Equilibrium Price: {synthetic_data[0][1]}")

```